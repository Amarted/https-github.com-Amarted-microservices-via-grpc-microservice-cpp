// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserGreetingsRpcService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UserGreetingsRpcService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UserGreetingsRpcService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UserGreetingsRpcService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UserGreetingsRpcService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserGreetingsRpcService_2eproto;
namespace Api {
namespace GrpcProto {
class UserGreetingsRequest;
struct UserGreetingsRequestDefaultTypeInternal;
extern UserGreetingsRequestDefaultTypeInternal _UserGreetingsRequest_default_instance_;
class UserGreetingsResponse;
struct UserGreetingsResponseDefaultTypeInternal;
extern UserGreetingsResponseDefaultTypeInternal _UserGreetingsResponse_default_instance_;
}  // namespace GrpcProto
}  // namespace Api
PROTOBUF_NAMESPACE_OPEN
template<> ::Api::GrpcProto::UserGreetingsRequest* Arena::CreateMaybeMessage<::Api::GrpcProto::UserGreetingsRequest>(Arena*);
template<> ::Api::GrpcProto::UserGreetingsResponse* Arena::CreateMaybeMessage<::Api::GrpcProto::UserGreetingsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Api {
namespace GrpcProto {

// ===================================================================

class UserGreetingsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Api.GrpcProto.UserGreetingsRequest) */ {
 public:
  inline UserGreetingsRequest() : UserGreetingsRequest(nullptr) {}
  ~UserGreetingsRequest() override;
  explicit PROTOBUF_CONSTEXPR UserGreetingsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserGreetingsRequest(const UserGreetingsRequest& from);
  UserGreetingsRequest(UserGreetingsRequest&& from) noexcept
    : UserGreetingsRequest() {
    *this = ::std::move(from);
  }

  inline UserGreetingsRequest& operator=(const UserGreetingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserGreetingsRequest& operator=(UserGreetingsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserGreetingsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserGreetingsRequest* internal_default_instance() {
    return reinterpret_cast<const UserGreetingsRequest*>(
               &_UserGreetingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserGreetingsRequest& a, UserGreetingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserGreetingsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserGreetingsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserGreetingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserGreetingsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserGreetingsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserGreetingsRequest& from) {
    UserGreetingsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserGreetingsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Api.GrpcProto.UserGreetingsRequest";
  }
  protected:
  explicit UserGreetingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // @@protoc_insertion_point(class_scope:Api.GrpcProto.UserGreetingsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserGreetingsRpcService_2eproto;
};
// -------------------------------------------------------------------

class UserGreetingsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Api.GrpcProto.UserGreetingsResponse) */ {
 public:
  inline UserGreetingsResponse() : UserGreetingsResponse(nullptr) {}
  ~UserGreetingsResponse() override;
  explicit PROTOBUF_CONSTEXPR UserGreetingsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserGreetingsResponse(const UserGreetingsResponse& from);
  UserGreetingsResponse(UserGreetingsResponse&& from) noexcept
    : UserGreetingsResponse() {
    *this = ::std::move(from);
  }

  inline UserGreetingsResponse& operator=(const UserGreetingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserGreetingsResponse& operator=(UserGreetingsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserGreetingsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserGreetingsResponse* internal_default_instance() {
    return reinterpret_cast<const UserGreetingsResponse*>(
               &_UserGreetingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserGreetingsResponse& a, UserGreetingsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserGreetingsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserGreetingsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserGreetingsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserGreetingsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserGreetingsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserGreetingsResponse& from) {
    UserGreetingsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserGreetingsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Api.GrpcProto.UserGreetingsResponse";
  }
  protected:
  explicit UserGreetingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGreetingsFieldNumber = 1,
  };
  // string greetings = 1;
  void clear_greetings();
  const std::string& greetings() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_greetings(ArgT0&& arg0, ArgT... args);
  std::string* mutable_greetings();
  PROTOBUF_NODISCARD std::string* release_greetings();
  void set_allocated_greetings(std::string* greetings);
  private:
  const std::string& _internal_greetings() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_greetings(const std::string& value);
  std::string* _internal_mutable_greetings();
  public:

  // @@protoc_insertion_point(class_scope:Api.GrpcProto.UserGreetingsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr greetings_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_UserGreetingsRpcService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserGreetingsRequest

// string username = 1;
inline void UserGreetingsRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& UserGreetingsRequest::username() const {
  // @@protoc_insertion_point(field_get:Api.GrpcProto.UserGreetingsRequest.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserGreetingsRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Api.GrpcProto.UserGreetingsRequest.username)
}
inline std::string* UserGreetingsRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:Api.GrpcProto.UserGreetingsRequest.username)
  return _s;
}
inline const std::string& UserGreetingsRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void UserGreetingsRequest::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGreetingsRequest::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* UserGreetingsRequest::release_username() {
  // @@protoc_insertion_point(field_release:Api.GrpcProto.UserGreetingsRequest.username)
  return _impl_.username_.Release();
}
inline void UserGreetingsRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Api.GrpcProto.UserGreetingsRequest.username)
}

// -------------------------------------------------------------------

// UserGreetingsResponse

// string greetings = 1;
inline void UserGreetingsResponse::clear_greetings() {
  _impl_.greetings_.ClearToEmpty();
}
inline const std::string& UserGreetingsResponse::greetings() const {
  // @@protoc_insertion_point(field_get:Api.GrpcProto.UserGreetingsResponse.greetings)
  return _internal_greetings();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserGreetingsResponse::set_greetings(ArgT0&& arg0, ArgT... args) {
 
 _impl_.greetings_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Api.GrpcProto.UserGreetingsResponse.greetings)
}
inline std::string* UserGreetingsResponse::mutable_greetings() {
  std::string* _s = _internal_mutable_greetings();
  // @@protoc_insertion_point(field_mutable:Api.GrpcProto.UserGreetingsResponse.greetings)
  return _s;
}
inline const std::string& UserGreetingsResponse::_internal_greetings() const {
  return _impl_.greetings_.Get();
}
inline void UserGreetingsResponse::_internal_set_greetings(const std::string& value) {
  
  _impl_.greetings_.Set(value, GetArenaForAllocation());
}
inline std::string* UserGreetingsResponse::_internal_mutable_greetings() {
  
  return _impl_.greetings_.Mutable(GetArenaForAllocation());
}
inline std::string* UserGreetingsResponse::release_greetings() {
  // @@protoc_insertion_point(field_release:Api.GrpcProto.UserGreetingsResponse.greetings)
  return _impl_.greetings_.Release();
}
inline void UserGreetingsResponse::set_allocated_greetings(std::string* greetings) {
  if (greetings != nullptr) {
    
  } else {
    
  }
  _impl_.greetings_.SetAllocated(greetings, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.greetings_.IsDefault()) {
    _impl_.greetings_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Api.GrpcProto.UserGreetingsResponse.greetings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GrpcProto
}  // namespace Api

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UserGreetingsRpcService_2eproto
