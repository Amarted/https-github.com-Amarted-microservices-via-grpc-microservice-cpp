// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: RpcApiService.proto

#include "RpcApiService.pb.h"
#include "RpcApiService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace Api {
namespace GrpcProto {

static const char* RcpApiService_method_names[] = {
  "/Api.GrpcProto.RcpApiService/greet",
};

std::unique_ptr< RcpApiService::Stub> RcpApiService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RcpApiService::Stub> stub(new RcpApiService::Stub(channel, options));
  return stub;
}

RcpApiService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_greet_(RcpApiService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RcpApiService::Stub::greet(::grpc::ClientContext* context, const ::Api::GrpcProto::UserGreetingsRequest& request, ::Api::GrpcProto::UserGreetingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Api::GrpcProto::UserGreetingsRequest, ::Api::GrpcProto::UserGreetingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_greet_, context, request, response);
}

void RcpApiService::Stub::async::greet(::grpc::ClientContext* context, const ::Api::GrpcProto::UserGreetingsRequest* request, ::Api::GrpcProto::UserGreetingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Api::GrpcProto::UserGreetingsRequest, ::Api::GrpcProto::UserGreetingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_greet_, context, request, response, std::move(f));
}

void RcpApiService::Stub::async::greet(::grpc::ClientContext* context, const ::Api::GrpcProto::UserGreetingsRequest* request, ::Api::GrpcProto::UserGreetingsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_greet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Api::GrpcProto::UserGreetingsResponse>* RcpApiService::Stub::PrepareAsyncgreetRaw(::grpc::ClientContext* context, const ::Api::GrpcProto::UserGreetingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Api::GrpcProto::UserGreetingsResponse, ::Api::GrpcProto::UserGreetingsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_greet_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Api::GrpcProto::UserGreetingsResponse>* RcpApiService::Stub::AsyncgreetRaw(::grpc::ClientContext* context, const ::Api::GrpcProto::UserGreetingsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgreetRaw(context, request, cq);
  result->StartCall();
  return result;
}

RcpApiService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RcpApiService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RcpApiService::Service, ::Api::GrpcProto::UserGreetingsRequest, ::Api::GrpcProto::UserGreetingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RcpApiService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Api::GrpcProto::UserGreetingsRequest* req,
             ::Api::GrpcProto::UserGreetingsResponse* resp) {
               return service->greet(ctx, req, resp);
             }, this)));
}

RcpApiService::Service::~Service() {
}

::grpc::Status RcpApiService::Service::greet(::grpc::ServerContext* context, const ::Api::GrpcProto::UserGreetingsRequest* request, ::Api::GrpcProto::UserGreetingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Api
}  // namespace GrpcProto

